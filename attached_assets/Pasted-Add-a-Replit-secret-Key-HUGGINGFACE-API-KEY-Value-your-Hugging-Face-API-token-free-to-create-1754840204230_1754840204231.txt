Add a Replit secret:

Key: HUGGINGFACE_API_KEY

Value: (your Hugging Face API token — free to create at https://huggingface.co/settings/tokens)

(Optional) If you want live YouTube search results instead of a curated list, add:

Key: YOUTUBE_API_KEY

Value: (from Google Cloud Console — optional; I’ll include both options)

If you want me to seed resources for you, tell me whether you want fully curated resources (I’ll include a starter bundle of ~30 YouTube + article links) or dynamic YouTube search.

Files to add (paste into your /server)
1) server/agents/recommenderAgent.js
js
Copy
Edit
// server/agents/recommenderAgent.js
const fetch = require("node-fetch");
const DB = require("@replit/database");
const db = new DB();
const HF_KEY = process.env.HUGGINGFACE_API_KEY;

// util: compute cosine similarity
function cosineSim(a, b) {
  let dot = 0, na = 0, nb = 0;
  for (let i = 0; i < a.length; i++) {
    dot += a[i] * b[i];
    na += a[i] * a[i];
    nb += b[i] * b[i];
  }
  return dot / (Math.sqrt(na) * Math.sqrt(nb) + 1e-12);
}

// call HF embedding model: sentence-transformers/all-MiniLM-L6-v2 (good, small)
async function getEmbedding(text) {
  if (!HF_KEY) throw new Error("HUGGINGFACE_API_KEY missing");
  const url = "https://api-inference.huggingface.co/embeddings/sentence-transformers/all-MiniLM-L6-v2";
  const res = await fetch(url, {
    method: "POST",
    headers: { Authorization: `Bearer ${HF_KEY}`, "Content-Type": "application/json" },
    body: JSON.stringify({ inputs: text })
  });
  if (!res.ok) {
    const txt = await res.text();
    throw new Error("HF embedding error: " + txt);
  }
  const j = await res.json();
  // HF returns {embedding: [...]} or [{embedding:[...]}]; normalize
  if (Array.isArray(j) && j.length && j[0].embedding) return j[0].embedding;
  if (j.embedding) return j.embedding;
  throw new Error("Unexpected HF embedding response: " + JSON.stringify(j).slice(0,200));
}

// Save a resource with precomputed embedding
// resource = { id, title, url, type, description, tags }
async function addResource(resource) {
  if (!resource.id) resource.id = `res:${Date.now()}:${Math.random().toString(36).slice(2,8)}`;
  // build searchable text
  const text = `${resource.title}\n${resource.description || ""}\n${(resource.tags || []).join(" ")}`;
  const embedding = await getEmbedding(text);
  resource.embedding = embedding;
  // store in DB list 'resources'
  const resources = (await db.get("resources")) || [];
  resources.push(resource);
  await db.set("resources", resources);
  return resource;
}

// Recommend top k resources for a list of topics (weakSkills)
async function recommendForTopics(topics = [], k = 5) {
  const resources = (await db.get("resources")) || [];
  if (!resources.length) return [];

  // make a single query text from topics
  const queryText = Array.isArray(topics) ? topics.join(" | ") : String(topics);
  const qEmb = await getEmbedding(queryText);

  // compute similarity to all resources
  const scored = resources.map(r => {
    const sim = cosineSim(qEmb, r.embedding || []);
    return { resource: r, score: sim };
  });

  scored.sort((a,b) => b.score - a.score);
  return scored.slice(0, k).map(s => ({ ...s.resource, score: s.score }));
}

// Helper: allow seeding a list of curated resources (array)
async function seedResources(resourcesList) {
  // resourcesList: array of {title, url, description, tags, type}
  const added = [];
  for (const r of resourcesList) {
    const addedRes = await addResource(r);
    added.push(addedRes);
  }
  return added;
}

module.exports = { addResource, recommendForTopics, seedResources, getEmbedding };
2) server/routes/recommender.js
js
Copy
Edit
// server/routes/recommender.js
const express = require("express");
const router = express.Router();
const { recommendForTopics, seedResources } = require("../agents/recommenderAgent");

// GET /learning-path?topics=python,recursion&k=5
router.get("/learning-path", async (req, res) => {
  try {
    const topicsRaw = req.query.topics || "";
    const k = parseInt(req.query.k || "5", 10);
    const topics = topicsRaw.split(",").map(t => t.trim()).filter(Boolean);
    const items = await recommendForTopics(topics, k);
    return res.json({ ok: true, items });
  } catch (err) {
    console.error(err);
    return res.status(500).json({ ok: false, error: err.message });
  }
});

// POST /learning-path/seed  (admin)
router.post("/learning-path/seed", async (req, res) => {
  try {
    const resources = req.body.resources;
    if (!Array.isArray(resources)) return res.status(400).json({ ok: false, error: "resources array expected" });
    const added = await seedResources(resources);
    res.json({ ok: true, addedCount: added.length });
  } catch (err) {
    console.error(err);
    res.status(500).json({ ok: false, error: err.message });
  }
});

module.exports = router;
3) Register the route in your server (if not already)
In your server/index.js or server/routes/index.js:

js
Copy
Edit
const recommenderRoutes = require("./recommender");
app.use("/api", recommenderRoutes); // or app.use("/recommender", recommenderRoutes)
Seeding resources (quick starter)
Create a JSON file server/data/seed-resources.json with some starter resources (example):

json
Copy
Edit
[
  {
    "title": "Python List Comprehensions - Crash Course",
    "url": "https://www.youtube.com/watch?v=3dt4OGnU5sM",
    "description": "Short, clear video explaining Python list comprehensions with examples.",
    "tags": ["python","list comprehension","python basics"],
    "type":"youtube"
  },
  {
    "title": "Recursion Explained - FreeCodeCamp Article",
    "url":"https://www.freecodecamp.org/news/recursion-in-programming/",
    "description":"A detailed article on recursion with examples across languages.",
    "tags":["recursion","algorithms"],
    "type":"article"
  }
]
Then run a small Node script (once) to seed:

js
Copy
Edit
// server/scripts/seedResources.js
const fs = require("fs");
const path = require("path");
const { seedResources } = require("../agents/recommenderAgent");

(async () => {
  const file = path.join(__dirname, "../data/seed-resources.json");
  const resources = JSON.parse(fs.readFileSync(file, "utf8"));
  const added = await seedResources(resources);
  console.log("Added:", added.length);
  process.exit(0);
})();
Run: node server/scripts/seedResources.js in Replit shell (ensure HUGGINGFACE_API_KEY is available).

Frontend: how to call it
From the Learning Path page, call:

js
Copy
Edit
// example fetch
const res = await fetch(`/api/learning-path?topics=python,recursion&k=6`);
const data = await res.json();
// render data.items (each has title, url, description, tags, score)
Render YouTube resources with thumbnails (you can use https://img.youtube.com/vi/<VIDEO_ID>/hqdefault.jpg) for nicer UI.

Optional: dynamic YouTube fetching
If you want live YouTube search instead of a purely curated DB, I can:

Add a /api/search/youtube?query=python+list+comprehension route that hits YouTube Data API (requires YOUTUBE_API_KEY).

Take top video results, embed them into vector store (optional), or return directly to user.
Let me know if you want that; it requires the YOUTUBE_API_KEY secret.

Limitations & future upgrades
This prototype uses HF inference for embeddings and Replit DB to store embeddings. It's fine for demo and small scale.

For production or many resources, migrate to:

Chroma / Qdrant vector DB (fast, persistent)

Batch embedding preprocessing and caching

A caching layer for recommendations

You can later switch embeddings to other providers (Nomic, OpenAI, Ollama) easily — the recommenderAgent abstracts embeddings.